[project]
name = "ds-workflow-template"
version = "0.1.0"
description = "Data science workflow template with MLOps best practices"
authors = [
    { name = "Rakesh Kurakula", email = "rakesh@example.com" },
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["data-science", "machine-learning", "mlops", "workflow", "template"]

# Core dependencies with version pins
dependencies = [
    # Data manipulation and analysis
    "numpy>=1.24.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0",
    "polars>=0.20.0,<1.0.0",
    "pyarrow>=14.0.0,<16.0.0",
    
    # Machine learning
    "scikit-learn>=1.3.0,<2.0.0",
    "lightgbm>=4.0.0,<5.0.0",
    "xgboost>=1.7.0,<3.0.0",
    
    # MLOps and experiment tracking
    "mlflow>=2.8.0,<3.0.0",
    
    # Data validation and quality
    "great-expectations>=0.18.0,<1.0.0",
    "pandera>=0.17.0,<1.0.0",
    
    # Web framework and API
    "fastapi>=0.104.0,<1.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    
    # Workflow orchestration
    "prefect>=2.14.0,<3.0.0",
    
    # Utilities
    "rich>=13.7.0,<14.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    
    # Code quality and testing
    "ruff>=0.1.6,<1.0.0",
    "pytest>=7.4.0,<8.0.0",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.5.0,<4.0.0",
    "black>=23.11.0,<25.0.0",
    "isort>=5.12.0,<6.0.0",
    "mypy>=1.7.0,<2.0.0",
    "bandit>=1.7.5,<2.0.0",
    "safety>=2.3.0,<4.0.0",
]

docs = [
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.4.0,<10.0.0",
    "mkdocstrings[python]>=0.24.0,<1.0.0",
]

notebooks = [
    "jupyter>=1.0.0,<2.0.0",
    "ipykernel>=6.26.0,<7.0.0",
    "matplotlib>=3.8.0,<4.0.0",
    "seaborn>=0.13.0,<1.0.0",
    "plotly>=5.17.0,<6.0.0",
]

[project.urls]
"Homepage" = "https://github.com/rakeshkurakula/ds-workflow-template"
"Documentation" = "https://github.com/rakeshkurakula/ds-workflow-template#readme"
"Repository" = "https://github.com/rakeshkurakula/ds-workflow-template"
"Bug Tracker" = "https://github.com/rakeshkurakula/ds-workflow-template/issues"
"Changelog" = "https://github.com/rakeshkurakula/ds-workflow-template/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pre-commit>=3.5.0,<4.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-xdist>=3.4.0,<4.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
]

# Ruff configuration
[tool.ruff]
# Set the maximum line length to 88 (Black's default)
line-length = 88

# Assume Python 3.10+
target-version = "py310"

# Enable specific rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "C90",    # mccabe complexity
    "T20",    # flake8-print
    "SIM",    # flake8-simplify
    "ICN",    # flake8-import-conventions
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PL",     # pylint
    "NPY",    # numpy
]

# Ignore specific rules
ignore = [
    "E501",    # line-too-long (handled by formatter)
    "B008",    # do-not-use-function-calls-in-argument-defaults (common pattern in FastAPI)
    "C901",    # too-complex (let mccabe handle complexity)
    "PLR0913", # too-many-arguments
    "PLR0912", # too-many-branches
    "PLR0915", # too-many-statements
    "PD901",   # pandas-df-variable-name (allow df as variable name)
]

# Exclude files and directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "great_expectations",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Use double quotes for strings.
quote-style = "double"

# Indent with spaces, rather than tabs.
indent-style = "space"

# Respect magic trailing commas.
skip-magic-trailing-comma = false

# Automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.per-file-ignores]
# Allow print statements in scripts
"scripts/*" = ["T20"]
# Allow assert statements in tests
"tests/*" = ["S101"]
# Allow unused imports in __init__.py files
"__init__.py" = ["F401"]

[tool.ruff.isort]
# Use a single line after each import block
lines-after-imports = 2
# Known first-party modules
known-first-party = ["ds_workflow_template"]
# Force imports to be sorted alphabetically within their section
force-sort-within-sections = true
# Combine star imports
combine-as-imports = true

[tool.ruff.mccabe]
# Maximum cyclomatic complexity
max-complexity = 10

# Pytest configuration
[tool.pytest.ini_options]
# Test discovery patterns
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test directories
testpaths = ["tests"]

# Minimum version requirement
minversion = "7.0"

# Add options
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--durations=10",
    "-ra",
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "smoke: marks tests as smoke tests",
    "regression: marks tests as regression tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "ml: marks tests as machine learning related",
    "data: marks tests as data processing related",
    "api: marks tests as API related",
]

# Filter warnings
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Log configuration
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Asyncio configuration
asyncio_mode = "auto"

# Timeout configuration (in seconds)
timeout = 300

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/setup.py",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"
